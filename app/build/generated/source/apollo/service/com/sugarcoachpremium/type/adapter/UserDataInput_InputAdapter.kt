//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.6'.
//
package com.sugarcoachpremium.type.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.present
import com.sugarcoachpremium.type.UserDataInput
import kotlin.IllegalStateException
import kotlin.Unit

public object UserDataInput_InputAdapter : Adapter<UserDataInput> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      UserDataInput = throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: UserDataInput,
  ): Unit {
    if (value.name is Optional.Present) {
      writer.name("name")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.name)
    }
    if (value.birth_date is Optional.Present) {
      writer.name("birth_date")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.birth_date)
    }
    if (value.sex is Optional.Present) {
      writer.name("sex")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.sex)
    }
    if (value.height is Optional.Present) {
      writer.name("height")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.height)
    }
    if (value.weight is Optional.Present) {
      writer.name("weight")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.weight)
    }
    if (value.debut_date is Optional.Present) {
      writer.name("debut_date")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.debut_date)
    }
    if (value.icon is Optional.Present) {
      writer.name("icon")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.icon)
    }
    if (value.users_permissions_user is Optional.Present) {
      writer.name("users_permissions_user")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters,
          value.users_permissions_user)
    }
    if (value.sugar_points is Optional.Present) {
      writer.name("sugar_points")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.sugar_points)
    }
  }
}
