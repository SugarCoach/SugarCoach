//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.sugarcoachpremium.type.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.present
import com.sugarcoachpremium.type.DailyRegisterInput
import kotlin.IllegalStateException
import kotlin.Unit

public object DailyRegisterInput_InputAdapter : Adapter<DailyRegisterInput> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      DailyRegisterInput = throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: DailyRegisterInput,
  ): Unit {
    if (value.glucose is Optional.Present) {
      writer.name("glucose")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.glucose)
    }
    if (value.insulin is Optional.Present) {
      writer.name("insulin")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.insulin)
    }
    if (value.carbohydrates is Optional.Present) {
      writer.name("carbohydrates")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.carbohydrates)
    }
    if (value.comment is Optional.Present) {
      writer.name("comment")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.comment)
    }
    if (value.photo is Optional.Present) {
      writer.name("photo")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.photo)
    }
    if (value.basal is Optional.Present) {
      writer.name("basal")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.basal)
    }
    if (value.colors is Optional.Present) {
      writer.name("colors")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.colors)
    }
    if (value.category is Optional.Present) {
      writer.name("category")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.category)
    }
    if (value.users_permissions_user is Optional.Present) {
      writer.name("users_permissions_user")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters,
          value.users_permissions_user)
    }
    if (value.emotional_state is Optional.Present) {
      writer.name("emotional_state")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.emotional_state)
    }
    if (value.excercise is Optional.Present) {
      writer.name("excercise")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.excercise)
    }
  }
}
