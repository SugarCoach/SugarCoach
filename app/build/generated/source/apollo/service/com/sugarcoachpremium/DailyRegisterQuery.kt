//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.6'.
//
package com.sugarcoachpremium

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.sugarcoachpremium.adapter.DailyRegisterQuery_ResponseAdapter
import com.sugarcoachpremium.adapter.DailyRegisterQuery_VariablesAdapter
import com.sugarcoachpremium.selections.DailyRegisterQuerySelections
import kotlin.Any
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class DailyRegisterQuery(
  public val userId: Optional<String?> = Optional.Absent,
) : Query<DailyRegisterQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    DailyRegisterQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = DailyRegisterQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.sugarcoachpremium.type.Query.type
  )
  .selections(selections = DailyRegisterQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(DailyRegisterQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val dailyRegisters: DailyRegisters?,
  ) : Query.Data

  public data class DailyRegisters(
    public val `data`: List<Data1>,
  )

  public data class Data1(
    public val id: String?,
    public val attributes: Attributes?,
  )

  public data class Attributes(
    public val glucose: Double?,
    public val insulin: Double?,
    public val carbohydrates: Double?,
    public val comment: String?,
    public val basal: Double?,
    public val colors: String?,
    public val emotional_state: String?,
    public val excercise: String?,
    public val createdAt: Any?,
    public val category: String?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "3b3fe2b83f53ec089384f933977d10eceaaa18a6c7f3917fd371b8666b6b1b33"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query DailyRegister($userId: ID) {
     *   dailyRegisters(filters: {
     *     users_permissions_user: {
     *       id: {
     *         eq: $userId
     *       }
     *
     *     }
     *
     *   }
     *   ) {
     *     data {
     *       id
     *       attributes {
     *         glucose
     *         insulin
     *         carbohydrates
     *         comment
     *         basal
     *         colors
     *         emotional_state
     *         excercise
     *         createdAt
     *         category
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query DailyRegister(${'$'}userId: ID) { dailyRegisters(filters: { users_permissions_user: { id: { eq: ${'$'}userId }  }  } ) { data { id attributes { glucose insulin carbohydrates comment basal colors emotional_state excercise createdAt category } } } }"

    public const val OPERATION_NAME: String = "DailyRegister"
  }
}
