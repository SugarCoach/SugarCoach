//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.sugarcoachpremium.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.sugarcoachpremium.GetUserDataQuery
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetUserDataQuery_ResponseAdapter {
  public object Data : Adapter<GetUserDataQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("usersData")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserDataQuery.Data {
      var _usersData: GetUserDataQuery.UsersData? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _usersData = UsersData.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserDataQuery.Data(
        usersData = _usersData
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserDataQuery.Data,
    ): Unit {
      writer.name("usersData")
      UsersData.obj().nullable().toJson(writer, customScalarAdapters, value.usersData)
    }
  }

  public object UsersData : Adapter<GetUserDataQuery.UsersData> {
    public val RESPONSE_NAMES: List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserDataQuery.UsersData {
      var _data: List<GetUserDataQuery.Data1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _data = Data1.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserDataQuery.UsersData(
        `data` = _data!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserDataQuery.UsersData,
    ): Unit {
      writer.name("data")
      Data1.obj().list().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<GetUserDataQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "attributes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserDataQuery.Data1 {
      var _id: String? = null
      var _attributes: GetUserDataQuery.Attributes? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _attributes = Attributes.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserDataQuery.Data1(
        id = _id,
        attributes = _attributes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserDataQuery.Data1,
    ): Unit {
      writer.name("id")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("attributes")
      Attributes.obj().nullable().toJson(writer, customScalarAdapters, value.attributes)
    }
  }

  public object Attributes : Adapter<GetUserDataQuery.Attributes> {
    public val RESPONSE_NAMES: List<String> = listOf("name", "birth_date", "sex", "height",
        "weight", "debut_date", "icon", "sugar_points")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserDataQuery.Attributes {
      var _name: String? = null
      var _birth_date: String? = null
      var _sex: String? = null
      var _height: Double? = null
      var _weight: Double? = null
      var _debut_date: String? = null
      var _icon: Int? = null
      var _sugar_points: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _birth_date = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _sex = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          4 -> _weight = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          5 -> _debut_date = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          6 -> _icon = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          7 -> _sugar_points = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserDataQuery.Attributes(
        name = _name,
        birth_date = _birth_date,
        sex = _sex,
        height = _height,
        weight = _weight,
        debut_date = _debut_date,
        icon = _icon,
        sugar_points = _sugar_points
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserDataQuery.Attributes,
    ): Unit {
      writer.name("name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("birth_date")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.birth_date)

      writer.name("sex")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.sex)

      writer.name("height")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)

      writer.name("weight")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.weight)

      writer.name("debut_date")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.debut_date)

      writer.name("icon")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.icon)

      writer.name("sugar_points")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.sugar_points)
    }
  }
}
