//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.sugarcoachpremium.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.sugarcoachpremium.type.DailyRegister
import com.sugarcoachpremium.type.DailyRegisterEntity
import com.sugarcoachpremium.type.DailyRegisterEntityResponseCollection
import com.sugarcoachpremium.type.DateTime
import com.sugarcoachpremium.type.GraphQLFloat
import com.sugarcoachpremium.type.GraphQLID
import com.sugarcoachpremium.type.GraphQLString
import kotlin.collections.List

public object DailyRegisterQuerySelections {
  private val __attributes: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "glucose",
          type = GraphQLFloat.type
        ).build(),
        CompiledField.Builder(
          name = "insulin",
          type = GraphQLFloat.type
        ).build(),
        CompiledField.Builder(
          name = "carbohydrates",
          type = GraphQLFloat.type
        ).build(),
        CompiledField.Builder(
          name = "comment",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "basal",
          type = GraphQLFloat.type
        ).build(),
        CompiledField.Builder(
          name = "colors",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "emotional_state",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "excercise",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "createdAt",
          type = DateTime.type
        ).build(),
        CompiledField.Builder(
          name = "category",
          type = GraphQLString.type
        ).build()
      )

  private val __data: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type
        ).build(),
        CompiledField.Builder(
          name = "attributes",
          type = DailyRegister.type
        ).selections(__attributes)
        .build()
      )

  private val __dailyRegisters: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "data",
          type = DailyRegisterEntity.type.notNull().list().notNull()
        ).selections(__data)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "dailyRegisters",
          type = DailyRegisterEntityResponseCollection.type
        ).arguments(listOf(
          CompiledArgument.Builder("filters", mapOf(
            "users_permissions_user" to mapOf(
              "id" to mapOf(
                "eq" to CompiledVariable("userId")
              )
            )
          )).build()
        ))
        .selections(__dailyRegisters)
        .build()
      )
}
