//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.sugarcoachpremium

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.sugarcoachpremium.adapter.TreatmentQuery_ResponseAdapter
import com.sugarcoachpremium.adapter.TreatmentQuery_VariablesAdapter
import com.sugarcoachpremium.selections.TreatmentQuerySelections
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class TreatmentQuery(
  public val userId: Optional<String?> = Optional.Absent,
) : Query<TreatmentQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    TreatmentQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = TreatmentQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.sugarcoachpremium.type.Query.type
  )
  .selections(selections = TreatmentQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TreatmentQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val treatments: Treatments?,
  ) : Query.Data

  public data class Treatments(
    public val `data`: List<Data1>,
  )

  public data class Data1(
    public val id: String?,
    public val attributes: Attributes?,
  )

  public data class Attributes(
    public val bomb: Boolean?,
    public val insulina_unit: Double?,
    public val object_glucose: Double?,
    public val correctora: Double?,
    public val correctora_unit: Double?,
    public val hyperglucose: Double?,
    public val hipoglucose: Double?,
    public val carbono: Double?,
    public val basal_insuline: String?,
    public val medidor: String?,
    public val bomba_infusora: String?,
    public val correctora_insuline: String?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "5f280b9036b3c0155bd6c81f0ced0eb2e71decb418644a00fb3da1ff22bdb381"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query Treatment($userId: ID) {
     *   treatments(filters: {
     *     users_permissions_user: {
     *       id: {
     *         eq: $userId
     *       }
     *
     *     }
     *
     *   }
     *   ) {
     *     data {
     *       id
     *       attributes {
     *         bomb
     *         insulina_unit
     *         object_glucose
     *         correctora
     *         correctora_unit
     *         hyperglucose
     *         hipoglucose
     *         carbono
     *         basal_insuline
     *         medidor
     *         bomba_infusora
     *         correctora_insuline
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query Treatment(${'$'}userId: ID) { treatments(filters: { users_permissions_user: { id: { eq: ${'$'}userId }  }  } ) { data { id attributes { bomb insulina_unit object_glucose correctora correctora_unit hyperglucose hipoglucose carbono basal_insuline medidor bomba_infusora correctora_insuline } } } }"

    public const val OPERATION_NAME: String = "Treatment"
  }
}
