//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.sugarcoachpremium.type.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.present
import com.sugarcoachpremium.type.TreatmentInput
import kotlin.IllegalStateException
import kotlin.Unit

public object TreatmentInput_InputAdapter : Adapter<TreatmentInput> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      TreatmentInput = throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: TreatmentInput,
  ): Unit {
    if (value.bomb is Optional.Present) {
      writer.name("bomb")
      NullableBooleanAdapter.present().toJson(writer, customScalarAdapters, value.bomb)
    }
    if (value.object_glucose is Optional.Present) {
      writer.name("object_glucose")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.object_glucose)
    }
    if (value.correctora_unit is Optional.Present) {
      writer.name("correctora_unit")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.correctora_unit)
    }
    if (value.hyperglucose is Optional.Present) {
      writer.name("hyperglucose")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.hyperglucose)
    }
    if (value.hipoglucose is Optional.Present) {
      writer.name("hipoglucose")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.hipoglucose)
    }
    if (value.correctora is Optional.Present) {
      writer.name("correctora")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.correctora)
    }
    if (value.insulina_unit is Optional.Present) {
      writer.name("insulina_unit")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.insulina_unit)
    }
    if (value.carbono is Optional.Present) {
      writer.name("carbono")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.carbono)
    }
    if (value.basal_insuline is Optional.Present) {
      writer.name("basal_insuline")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.basal_insuline)
    }
    if (value.medidor is Optional.Present) {
      writer.name("medidor")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.medidor)
    }
    if (value.bomba_infusora is Optional.Present) {
      writer.name("bomba_infusora")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.bomba_infusora)
    }
    if (value.correctora_insuline is Optional.Present) {
      writer.name("correctora_insuline")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters,
          value.correctora_insuline)
    }
    if (value.users_permissions_user is Optional.Present) {
      writer.name("users_permissions_user")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters,
          value.users_permissions_user)
    }
  }
}
